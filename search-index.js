crystal_doc_search_index_callback({"repository_name":"github.com/chris-huxtable/atomic_write.cr","body":"# atomic_write.cr\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://chris-huxtable.github.io/atomic_write.cr/)\n[![GitHub release](https://img.shields.io/github/release/chris-huxtable/atomic_write.cr.svg)](https://github.com/chris-huxtable/atomic_write.cr/releases)\n[![Build Status](https://travis-ci.org/chris-huxtable/atomic_write.cr.svg?branch=master)](https://travis-ci.org/chris-huxtable/atomic_write.cr)\n\nExtends `File` to provide `atomic_write()`.\n\nAn atomic write creates a new file at a temporary path. It then writes the new\nfile contents to that file. Lastly it renames it to the original path. This dramatically\nreduces the opportunity for file corruption.\n\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  atomic_write:\n    github: chris-huxtable/atomic_write.cr\n```\n\n\n## Usage\n\n```crystal\nrequire \"atomic_write\"\n```\n\nAtomic write:\n\n```crystal\nFile.atomic_write(\"some/path\") { |fd| fd << \"hello world\" }\n```\n\nAtomic append:\n\n```crystal\nFile.atomic_write(\"some/path\", append: true) { |fd| fd << \"hello world\" }\n```\n\nAtomic copy:\n\n```crystal\nFile.atomic_copy(\"some/src/path\", \"some/dst/path\")\n```\n\n\n## Contributing\n\n1. Fork it ( https://github.com/chris-huxtable/atomic_write.cr/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n\n## Contributors\n\n- [Chris Huxtable](https://github.com/chris-huxtable) - creator, maintainer\n","program":{"html_id":"github.com/chris-huxtable/atomic_write.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/chris-huxtable/atomic_write.cr","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/chris-huxtable/atomic_write.cr/File","path":"File.html","kind":"class","full_name":"File","name":"File","abstract":false,"superclass":{"html_id":"github.com/chris-huxtable/atomic_write.cr/IO/FileDescriptor","kind":"class","full_name":"IO::FileDescriptor","name":"FileDescriptor"},"ancestors":[{"html_id":"github.com/chris-huxtable/atomic_write.cr/Crystal/System/File","kind":"module","full_name":"Crystal::System::File","name":"File"},{"html_id":"github.com/chris-huxtable/atomic_write.cr/IO/FileDescriptor","kind":"class","full_name":"IO::FileDescriptor","name":"FileDescriptor"},{"html_id":"github.com/chris-huxtable/atomic_write.cr/IO/Buffered","kind":"module","full_name":"IO::Buffered","name":"Buffered"},{"html_id":"github.com/chris-huxtable/atomic_write.cr/Crystal/System/FileDescriptor","kind":"module","full_name":"Crystal::System::FileDescriptor","name":"FileDescriptor"},{"html_id":"github.com/chris-huxtable/atomic_write.cr/IO/Evented","kind":"module","full_name":"IO::Evented","name":"Evented"},{"html_id":"github.com/chris-huxtable/atomic_write.cr/IO","kind":"class","full_name":"IO","name":"IO"},{"html_id":"github.com/chris-huxtable/atomic_write.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/chris-huxtable/atomic_write.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atomic_write.cr","line_number":15,"url":"https://github.com/chris-huxtable/atomic_write.cr/blob/f0bd3ee549a8192803bde4321a734f9bc7c14aeb/src/atomic_write.cr"}],"repository_name":"github.com/chris-huxtable/atomic_write.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/chris-huxtable/atomic_write.cr/Crystal/System/File","kind":"module","full_name":"Crystal::System::File","name":"File"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `File` instance represents a file entry in the local file system and allows using it as an `IO`.\n\n```\nfile = File.new(\"path/to/file\")\ncontent = file.gets_to_end\nfile.close\n\n# Implicit close with `open`\ncontent = File.open(\"path/to/file\") do |file|\n  file.gets_to_end\nend\n\n# Shortcut:\ncontent = File.read(\"path/to/file\")\n```\n\n## Temporary Files\n\nEvery tempfile is operated as a `File`, including initializing, reading and writing.\n\n```\ntempfile = File.tempfile(\"foo\")\n\nFile.size(tempfile.path)                   # => 6\nFile.info(tempfile.path).modification_time # => 2015-10-20 13:11:12 UTC\nFile.exists?(tempfile.path)                # => true\nFile.read_lines(tempfile.path)             # => [\"foobar\"]\n```\n\nFiles created from `tempfile` are stored in a directory that handles\ntemporary files (`Dir.tempdir`):\n\n```\nFile.tempfile(\"foo\").path # => \"/tmp/foo.ulBCPS\"\n```\n\nIt is encouraged to delete a tempfile after using it, which\nensures they are not left behind in your filesystem until garbage collected.\n\n```\ntempfile = File.tempfile(\"foo\")\ntempfile.delete\n```","summary":"<p>A <code><a href=\"File.html\">File</a></code> instance represents a file entry in the local file system and allows using it as an <code>IO</code>.</p>","class_methods":[{"id":"atomic_copy(src:String,dst:String,perm=DEFAULT_CREATE_PERMISSIONS):Nil-class-method","html_id":"atomic_copy(src:String,dst:String,perm=DEFAULT_CREATE_PERMISSIONS):Nil-class-method","name":"atomic_copy","doc":"Ensures the copied file is written completely or not at all preventing corruption of the file.","summary":"<p>Ensures the copied file is written completely or not at all preventing corruption of the file.</p>","abstract":false,"args":[{"name":"src","doc":null,"default_value":"","external_name":"src","restriction":"String"},{"name":"dst","doc":null,"default_value":"","external_name":"dst","restriction":"String"},{"name":"perm","doc":null,"default_value":"DEFAULT_CREATE_PERMISSIONS","external_name":"perm","restriction":""}],"args_string":"(src : String, dst : String, perm = <span class=\"t\">DEFAULT_CREATE_PERMISSIONS</span>) : Nil","source_link":"https://github.com/chris-huxtable/atomic_write.cr/blob/f0bd3ee549a8192803bde4321a734f9bc7c14aeb/src/atomic_write.cr#L68","def":{"name":"atomic_copy","args":[{"name":"src","doc":null,"default_value":"","external_name":"src","restriction":"String"},{"name":"dst","doc":null,"default_value":"","external_name":"dst","restriction":"String"},{"name":"perm","doc":null,"default_value":"DEFAULT_CREATE_PERMISSIONS","external_name":"perm","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"open(src, \"r\") do |src_fd|\n  atomic_write(dst, src_fd, perm)\nend"}},{"id":"atomic_write(path:String,perm=DEFAULT_CREATE_PERMISSIONS,encoding=nil,invalid=nil,*,append:Bool=false,&block:IO::FileDescriptor->Nil):Nil-class-method","html_id":"atomic_write(path:String,perm=DEFAULT_CREATE_PERMISSIONS,encoding=nil,invalid=nil,*,append:Bool=false,&amp;block:IO::FileDescriptor-&gt;Nil):Nil-class-method","name":"atomic_write","doc":"Ensures the content written to the file descriptor is written completely or not at all\npreventing corruption of the file.\n\nIf a file is being created, its initial permissions may be set using the *perm* parameter.\nThen the given block will be passed the opened file descriptor as an argument, the file will\nbe automatically closed and saved when the block returns.\n\nThis is done by saving the new contents at temporary path. When the new content is\nsuccessfully written the temporary path is changed to the provided path ensuring the data is\nnot corrupted. If the write fails the temporary file is deleted.","summary":"<p>Ensures the content written to the file descriptor is written completely or not at all preventing corruption of the file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"perm","doc":null,"default_value":"DEFAULT_CREATE_PERMISSIONS","external_name":"perm","restriction":""},{"name":"encoding","doc":null,"default_value":"nil","external_name":"encoding","restriction":""},{"name":"invalid","doc":null,"default_value":"nil","external_name":"invalid","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"append","doc":null,"default_value":"false","external_name":"append","restriction":"Bool"}],"args_string":"(path : String, perm = <span class=\"t\">DEFAULT_CREATE_PERMISSIONS</span>, encoding = <span class=\"n\">nil</span>, invalid = <span class=\"n\">nil</span>, *, append : Bool = <span class=\"n\">false</span>, &block : IO::FileDescriptor -> Nil) : Nil","source_link":"https://github.com/chris-huxtable/atomic_write.cr/blob/f0bd3ee549a8192803bde4321a734f9bc7c14aeb/src/atomic_write.cr#L26","def":{"name":"atomic_write","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"perm","doc":null,"default_value":"DEFAULT_CREATE_PERMISSIONS","external_name":"perm","restriction":""},{"name":"encoding","doc":null,"default_value":"nil","external_name":"encoding","restriction":""},{"name":"invalid","doc":null,"default_value":"nil","external_name":"invalid","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"append","doc":null,"default_value":"false","external_name":"append","restriction":"Bool"}],"double_splat":null,"splat_index":4,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(IO::FileDescriptor -> Nil)"},"return_type":"Nil","visibility":"Public","body":"atomic_path = \"#{path}.atomic_#{Random::Secure.urlsafe_base64(16)}\"\nif exists?(atomic_path)\n  raise(\"Failed to generate temporary path, exists\")\nend\nopen(atomic_path, \"w\", perm, encoding, invalid) do |fd|\n  begin\n    fd.flock_exclusive do\n      if append\n        open(path, \"r\") do |src|\n          IO.copy(src, fd)\n        end\n      end\n      yield fd\n      fd.flush\n    end\n  rescue ex\n    delete(atomic_path)\n    raise(ex)\n  end\nend\nif info = info?(path)\n  chmod(atomic_path, info.permissions)\n  chown(atomic_path, info.owner, info.group)\nend\nrename(atomic_path, path)\n"}},{"id":"atomic_write(path:String,content,perm=DEFAULT_CREATE_PERMISSIONS,encoding=nil,invalid=nil):Nil-class-method","html_id":"atomic_write(path:String,content,perm=DEFAULT_CREATE_PERMISSIONS,encoding=nil,invalid=nil):Nil-class-method","name":"atomic_write","doc":"Writes the provided content completely or not at all preventing file corruption.\n\nThis is preformed in the same way as `atomic_write` with block.\n\nNOTE: If the content is a `Slice(UInt8)`, those bytes will be written.\nIf it's an `IO`, all bytes from the `IO` will be written.\nOtherwise, the string representation of *content* will be written\n(the result of invoking `to_s` on *content*).","summary":"<p>Writes the provided content completely or not at all preventing file corruption.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""},{"name":"perm","doc":null,"default_value":"DEFAULT_CREATE_PERMISSIONS","external_name":"perm","restriction":""},{"name":"encoding","doc":null,"default_value":"nil","external_name":"encoding","restriction":""},{"name":"invalid","doc":null,"default_value":"nil","external_name":"invalid","restriction":""}],"args_string":"(path : String, content, perm = <span class=\"t\">DEFAULT_CREATE_PERMISSIONS</span>, encoding = <span class=\"n\">nil</span>, invalid = <span class=\"n\">nil</span>) : Nil","source_link":"https://github.com/chris-huxtable/atomic_write.cr/blob/f0bd3ee549a8192803bde4321a734f9bc7c14aeb/src/atomic_write.cr#L57","def":{"name":"atomic_write","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""},{"name":"perm","doc":null,"default_value":"DEFAULT_CREATE_PERMISSIONS","external_name":"perm","restriction":""},{"name":"encoding","doc":null,"default_value":"nil","external_name":"encoding","restriction":""},{"name":"invalid","doc":null,"default_value":"nil","external_name":"invalid","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"atomic_write(path, perm, encoding, invalid) do |fd|\n  case content\n  when Bytes\n    fd.write(content)\n  when IO\n    IO.copy(content, fd)\n  else\n    fd.print(content)\n  end\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}})